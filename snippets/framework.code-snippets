{
    "ðŸ“Ž Module Class": {
        "prefix": "inc-mc",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_FILENAME_BASE/(^class-)([a-z]*$)?/${2:/capitalize}/g}",
            " * ",
            " * A class that handles ${TM_FILENAME_BASE/(^class-)([a-z]*$)?/${2:/lowercase}/g}.",
            " *",
            " * @package Theme/${TM_DIRECTORY/(^.+\\/)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/(^.+\\/)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g};",
            "\t  use Useful_Framework\\Library;",
            "",
            "class ${TM_FILENAME_BASE/(^class-)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g} extends Library\\Package {",
            "",
            "\tpublic function initialize() {",
            "",
            "\t\tparent::initialize();",
            "\t}",
            "}",
        ]
    },
    "ðŸ“Ž Parent Class": {
        "prefix": "inc-pc",
        "scope": "html",
        "body": [
            "<?php",
            "",
            "namespace Useful_Group\\Includes;",
            "use Useful_Framework\\Library;",
            "",
            "class ${TM_FILENAME_BASE/(^class-)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g} extends Library\\Master {",
            "",
            "\tpublic function initialize() {",
            "\t\tparent::initialize();",
            "\t}",
            "",
            "",
            "\tpublic function __construct() {",
            "\t\tparent::__construct();",
            "",
            "\t\t\\$this->${1:module_reference_name} = new ${TM_FILENAME_BASE/(^class-)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g}\\\\${2:MODULE_CLASS_NAME}();",
            "",
            "\t\t\\$this->add_modules([",
            "\t\t\t\\$this->${1:module_reference_name}",
            "\t\t]);",
            "\t}",
            "}",
        ]
    },
    "ðŸ“Ž Post Type Registration": {
        "prefix": "inc-pr",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} Setup",
            " *",
            " * A class that registers and manages the",
            " * ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} post type.",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g};",
            "\t  use Useful_Framework\\Library;",
            "",
            "class Setup extends Library\\Package {",
            "",
            "\tpublic function initialize() {",
            "\t\t\\$this->add_action( 'init', 'register_post_type' );",
            "",
            "\t\tparent::initialize();",
            "\t}",
            "",
            "",
            "\tpublic function register_post_type() {",
            "\t\t\\$labels = [",
            "\t\t\t'name'               => '${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}',",
            "\t\t\t'singular_name'      => '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}',",
            "\t\t\t'add_new_item'       => 'Add ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}',",
            "\t\t\t'edit_item'          => 'Edit ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}',",
            "\t\t\t'new_item'           => 'New ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}',",
            "\t\t\t'view_item'          => 'View ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}',",
            "\t\t\t'search_items'       => 'Search ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}',",
            "\t\t\t'not_found'          => 'No ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} Found',",
            "\t\t\t'not_found_in_trash' => 'No ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} Found in Trash',",
            "\t\t\t'parent_item_colon'  => 'Parent ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}'",
            "\t\t];",
            "",
            "\t\t\\$supports = apply_filters('theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}/register/supports', [",
            "\t\t\t'title',",
            "\t\t\t'page-attributes',",
            "\t\t\t'thumbnail'",
            "\t\t]);",
            "",
            "\t\t\\$taxonomies = apply_filters('theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}/register/taxonomies', []);",
            "",
            "\t\t\\$rewrite = [",
            "\t\t\t'slug'       => '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}',",
            "\t\t\t'with_front' => true,",
            "\t\t];",
            "",
            "\t\t\\$args = [",
            "\t\t\t'labels'              => \\$labels,",
            "\t\t\t'public'              => true,",
            "\t\t\t'exclude_from_search' => false,",
            "\t\t\t'publicly_queryable'  => true,",
            "\t\t\t'show_ui'             => true,",
            "\t\t\t'show_in_nav_menus'   => true,",
            "\t\t\t'show_in_menu'        => true,",
            "\t\t\t'show_in_admin_bar'   => true,",
            "\t\t\t'menu_position'       => null,",
            "\t\t\t'menu_icon'           => 'dashicons-${1:DASHICON_SLUG}',",
            "\t\t\t'capability_type'     => 'post',",
            "\t\t\t'hierarchical'        => true,",
            "\t\t\t'supports'            => \\$supports,",
            "\t\t\t'taxonomies'          => \\$taxonomies,",
            "\t\t\t'has_archive'         => 'custom_page',",
            "\t\t\t'rewrite'             => \\$rewrite,",
            "\t\t\t'query_var'           => true,",
            "\t\t\t'show_in_rest'        => true",
            "\t\t];",
            "",
            "\t\tregister_post_type( '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}', \\$args );",
            "\t}",
            "}$0",
        ]
    },
    "ðŸ“Ž Post Type Interface": {
        "prefix": "inc-pi",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g};",
            "",
            "class ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} {",
            "",
            "\tpublic static function is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$post) {",
            "\t\t\\$post = get_post( \\$post );",
            "",
            "\t\tif ( !\\$post || get_post_type(\\$post) !== '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' ) return false;",
            "",
            "\t\treturn true;",
            "\t}",
            "",
            "",
            "\tpublic static function get_instance(\\$post) {",
            "\t\t\\$post = get_post( \\$post, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "",
            "\t\tif ( !self::is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$post) ) return false;",
            "",
            "\t\treturn new self(\\$post);",
            "\t}",
            "",
            "",
            "\tpublic function __construct(\\$post) {",
            "\t\t\\$this->post = get_post( \\$post, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "\t}",
            "",
            "",
            "\tpublic function get_post_type() {",
            "\t\treturn '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}';",
            "\t}",
            "",
            "",
            "\tpublic function get_id() {",
            "\t\treturn \\$this->post->ID;",
            "\t}",
            "",
            "",
            "\tpublic function get_url() {",
            "\t\treturn get_permalink(\\$this->post);",
            "\t}",
            "",
            "",
            "\tpublic function get_title() {",
            "\t\treturn \\$this->post->post_title;",
            "\t}",
            "",
            "",
            "\tpublic function get_thumbnail() {",
            "\t\treturn get_featured_image(\\$this->post);",
            "\t}",
            "}$0"
        ]
    },
    "ðŸ“Ž Post Type Functions": {
        "prefix": "inc-pfs",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Functions",
            " * ",
            " * Functions specific to ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} handling.",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "use Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}\\\\${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g};",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} Page Link",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve the link to the ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} archive page.",
            " * ",
            " * @return string",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}_link() {",
                "\t\\$option = get_option('page_for_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}');",
                "\treturn \\$option ? get_permalink(\\$option) : '';",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Check If Is ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Check if post is a ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}.",
            " * ",
            " * @param int|WP_Post|null \\$post",
            " *  Post id or post object",
            " * ",
            " * @return boolean",
            " */",
            "function is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$post=false) {",
            "\tif ( !\\$post ) \\$post = get_the_ID();",
            "\treturn ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}::is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$post);",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} given a post ID or post/${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\tif ( empty( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) && isset( \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'] ) ) {",
            "\t\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'];",
            "\t}",
            "",
            "\tif ( !\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return null;",
            "",
            "\tif ( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} instanceof ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ) {",
            "\t\t\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "\t} else {",
            "\t\t\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}::get_instance(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "\t}",
            "",
            "\tif ( !\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return null;",
            "",
            "\treturn \\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve list of ${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}.",
            " *",
            " * @param array \\$args",
            " *  Arguments for get_posts()",
            " * ",
            " * @return array",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}( \\$args = null ) {",
            "\tif ( !\\$args ) \\$args = [",
            "\t\t'numberposts' => -1,",
            "\t\t'orderby'     => 'menu_order date'",
            "\t];",
            "",
            "\t\\$args['post_type'] = '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}';",
            "",
            "\treturn get_posts(\\$args);",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Setup ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Data",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Setup global ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} data.",
            " * ",
            " * @global ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return boolean",
            " */",
            "function setup_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}data( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) {",
            "\t\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif ( !\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return false;",
            "",
            "\tunset( \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'] );",
            "",
            "\t\\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'] = \\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "",
            "\tdo_action('setup_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}data', \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}']);",
            "",
            "\treturn true;",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Reset ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Data",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Restore global ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} data to current queried object.",
            " * ",
            " * @global ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " */",
            "function reset_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}data() {",
            "\t\\$post = get_queried_object();",
            "",
            "\tif (",
            "\t\tempty( \\$post->post_type )",
            "\t\t|| \\$post->post_type != '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'",
            "\t) return;",
            "",
            "\tsetup_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}data(\\$post);",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ID",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} id given a post ID or post object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return int|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_id( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_id();",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Title",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} title given a post ID or post object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return string|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_title( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_title();",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Thumbnail",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} thumbnail given a post ID or post object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return string|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_thumbnail( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_thumbnail();",
            "}$0",
        ]
    },
    "ðŸ“Ž Function": {
        "prefix": "inc-f",
        "scope": "php",
        "body": [
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… FUNCTION FOR ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Function for ${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}.",
            " *",
            " * @param array \\$VARIABLE",
            " *  Description for variable",
            " * ",
            " * @return array",
            " */",
            "function ${1:function_name}() {$0}"
        ]
    },
    "ðŸ“Ž Clipboard Function": {
        "prefix": "inc-cf",
        "scope": "php",
        "body": [
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… FUNCTION FOR ${CLIPBOARD/(([a-z]+)(_|-)?)/${2:/capitalize}${3:+ }/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Function for ${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}.",
            " *",
            " * @param array \\$VARIABLE",
            " *  Description for variable",
            " * ",
            " * @return array",
            " */",
            "function ${CLIPBOARD/(([a-z]+)(-)?)/${2:/lowercase}${3:+_}/g}() {$0}"
        ]
    },
    "ðŸ“Ž Post Function": {
        "prefix": "inc-pf",
        "scope": "php",
        "body": [
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ${2:SOMETHING_CAPITALIZED}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ${3:SOMETHING_LOWERCASE} given a post ID or post object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return ${4|string,array,object|}",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_${3:SOMETHING_LOWERCASE}( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_${3:SOMETHING_LOWERCASE}();",
            "}$0",
        ]
    },
    "ðŸ“Ž Clipboard Post Function": {
        "prefix": "inc-cpf",
        "scope": "php",
        "body": [
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ${CLIPBOARD/(([a-z]+)(_|-)?)/${2:/capitalize}${3:+ }/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ${CLIPBOARD/(([a-z]+)(_|-)?)/${2:/lowercase}${3:+ }/g} given a post ID or post object.",
            " *",
            " * @param int|WP_Post|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Post ID, post object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return ${4|string,array,object|}",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_${CLIPBOARD/(([a-z]+)(-)?)/${2:/lowercase}${3:+_}/g}( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_${CLIPBOARD/(([a-z]+)(-)?)/${2:/lowercase}${3:+_}/g}();",
            "}$0",
        ]
    },
    "ðŸ“Ž Taxonomy Function": {
        "prefix": "inc-tf",
        "scope": "php",
        "body": [
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ${2:SOMETHING_CAPITALIZED}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ${3:SOMETHING_LOWERCASE} given a term ID or term object.",
            " *",
            " * @param int|WP_Term|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Term ID, term object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return ${4|string,array,object|}",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_${3:SOMETHING_LOWERCASE}( \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "\t\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "\tif (!\\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "\treturn \\$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_${3:SOMETHING_LOWERCASE}();",
            "}$0",
        ]
    },
    "ðŸ“Ž File Name": {
        "prefix": "inc-fn",
        "scope": "php",
        "body": [
            "${TM_FILENAME_BASE/(^class-)([a-z]*$)?/${2:/lowercase}/g}"
        ]
    },
    "ðŸ“Ž Directory Name": {
        "prefix": "inc-dn",
        "scope": "php",
        "body": [
            "${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}"
        ]
    },
    "ðŸ“Ž File Name (Capitalized)": {
        "prefix": "inc-fnc",
        "scope": "php",
        "body": [
            "${TM_FILENAME_BASE/(^class-)([a-z]*$)?/${2:/capitalize}/g}"
        ]
    },
    "ðŸ“Ž Directory Name (Capitalized)": {
        "prefix": "inc-dnc",
        "scope": "php",
        "body": [
            "${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}"
        ]
    },
    "ðŸ“Ž Taxonomy Registration": {
        "prefix": "inc-tr",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Setup",
            " * ",
            " * A class that registers and manages the",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} taxonomy.",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g};",
            "\t  use Useful_Framework\\Library;",
            "",
            "class Setup extends Library\\Package {",
            "",
            "\tpublic function initialize() {",
            "\t\t\\$this->add_action( 'init', 'register_taxonomy', 5 );",
            "\t\t\\$this->add_filter( 'theme/${1:POST_TYPE_PLURAL}/register/taxonomies', 'add_taxonomy_to_${1:POST_TYPE_PLURAL}', 10 );",
            "",
            "\t\tparent::initialize();",
            "\t}",
            "",
            "",
            "\tpublic function register_taxonomy() {",
            "\t\t\\$post_types = apply_filters('theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}/register/post_types', []);",
            "",
            "\t\t\\$labels = [",
            "\t\t\t'name'              => _x( '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}', 'taxonomy general name' ),",
            "\t\t\t'singular_name'     => _x( '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}', 'taxonomy singular name' ),",
            "\t\t\t'search_items'      => __( 'Search ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}' ),",
            "\t\t\t'all_items'         => __( 'All ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}' ),",
            "\t\t\t'parent_item'       => __( 'Parent ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}' ),",
            "\t\t\t'parent_item_colon' => __( 'Parent ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}:' ),",
            "\t\t\t'edit_item'         => __( 'Edit ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}' ),",
            "\t\t\t'update_item'       => __( 'Update ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}' ),",
            "\t\t\t'add_new_item'      => __( 'Add New ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}' ),",
            "\t\t\t'new_item_name'     => __( 'New ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Name' ),",
            "\t\t\t'menu_name'         => __( '${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}' )",
            "\t\t];",
            "",
            "\t\t\\$rewrite = [",
            "\t\t\t'slug'         => '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}',",
            "\t\t\t'hierarchical' => true,",
            "\t\t\t'with_front'   => false",
            "\t\t];",
            "",
            "\t\t\\$args = [",
            "\t\t\t'hierarchical'      => true,",
            "\t\t\t'labels'            => \\$labels,",
            "\t\t\t'public'            => true,",
            "\t\t\t'show_ui'           => true,",
            "\t\t\t'show_admin_column' => true,",
            "\t\t\t'query_var'         => 'custom_page',",
            "\t\t\t'rewrite'           => \\$rewrite",
            "\t\t];",
            "",
            "\t\tregister_taxonomy( '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}', \\$post_types, \\$args );",
            "\t}",
            "",
            "",
            "\tpublic function add_taxonomy_to_${1:POST_TYPE_PLURAL}(\\$taxonomies) {",
            "\t\tarray_push( \\$taxonomies, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "",
            "\t\treturn \\$taxonomies;",
            "\t}",
            "}$0"
        ]
    },
    "ðŸ“Ž Taxonomy Interface": {
        "prefix": "inc-ti",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g};",
            "",
            "class ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} {",
            "",
            "\tpublic static function is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$term) {",
            "\t\t\\$term = get_term( \\$term, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "",
            "\t\tif ( !\\$term || \\$term->taxonomy !== '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' ) return false;",
            "",
            "\t\treturn true;",
            "\t}",
            "",
            "",
            "\tpublic static function get_instance(\\$term) {",
            "\t\t\\$term = get_term( \\$term, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "",
            "\t\tif ( !\\$term ) return false;",
            "",
            "\t\treturn new self(\\$term);",
            "\t}",
            "",
            "",
            "\tpublic function __construct(\\$term) {",
            "\t\t\\$this->term = get_term( \\$term, '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}' );",
            "\t}",
            "",
            "",
            "\tpublic function get_taxonomy() {",
            "\t\treturn '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}';",
            "\t}",
            "",
            "",
            "\tpublic function get_id() {",
            "\t\treturn \\$this->term->term_id;",
            "\t}",
            "",
            "",
            "\tpublic function get_title() {",
            "\t\treturn \\$this->term->name;",
            "\t}",
            "",
            "",
            "\tpublic function get_slug() {",
            "\t\treturn \\$this->term->slug;",
            "\t}",
            "",
            "",
            "\tpublic function get_${1:POST_TYPE_PLURAL}( \\$args = null ) {",
            "\t\tif ( !\\$args ) {",
            "\t\t\t\\$args = [",
            "\t\t\t\t'numberposts' => -1,",
            "\t\t\t\t'orderby'     => 'menu_order date'",
            "\t\t\t];",
            "\t\t}",
            "",
            "\t\t\\$args['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}']   = \\$this->term->slug;",
            "\t\t\\$args['post_type'] = '${2:POST_TYPE_SINGULAR}';",
            "",
            "\t\treturn get_posts(\\$args);",
            "\t}",
            "}$0"
        ]
    },
    "ðŸ“Ž Taxonomy Functions": {
        "prefix": "inc-tfs",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Functions",
            " * ",
            " * Functions specific to ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} handling.",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "use Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}/g}\\\\${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize};",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} Page Link",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve the link to the ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g} archive page.",
            " * ",
            " * @return string",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}_link() {",
                "\t\\$option = get_option('page_for_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}');",
                "\treturn \\$option ? get_permalink(\\$option) : '';",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Check If Is ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Check if term is a ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}.",
            " * ",
            " * @param int|WP_Term|null \\$term",
            " *  Term id or term object",
            " * ",
            " * @return boolean",
            " */",
            "function is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}( \\$term = false ) {",
            "    if ( !\\$term ) \\$term = get_queried_object();",
            "    return ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}::is_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$term);",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} given a term ID or term/${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object.",
            " *",
            " * @param int|WP_Term|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Term ID, term object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "    if ( empty( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) && isset( \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'] )) {",
            "        $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = \\$GLOBALS['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'];",
            "    }",
            "",
            "    if ( !$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return null;",
            "",
            "    if ( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} instanceof ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ) {",
            "        \\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "    } else {",
            "        \\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}::get_instance($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "    }",
            " ",
            "    if ( !\\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return null;",
            "",
            "    return \\$_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve list of ${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}.",
            " *",
            " * @param array \\$args",
            " *  Arguments for get_terms()",
            " * ",
            " * @return array",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}( \\$args = null ) {",
            "    if ( !\\$args ) \\$args = [",
            "        'hide_empty' => false,",
            "        'orderby'    => 'menu_order date'",
            "    ];",
            "",
            "    \\$args['taxonomy'] = '${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}';",
            "",
            "    return get_terms(\\$args);",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Title",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} title given a term ID or term object.",
            " *",
            " * @param int|WP_Term|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Term ID, term object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return string|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_title( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "    $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "    if (!$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "    return $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_title();",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} Slug",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} slug given a term ID or term object.",
            " *",
            " * @param int|WP_Term|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Term ID, term object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return string|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_slug( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "    $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "    if (!$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "    return $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_slug();",
            "}",
            "",
            "",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "// âœ… Get ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g} ${2:POST_TYPE_PLURAL_CAPITALIZED}",
            "//â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡",
            "/**",
            " * Retrieve ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ${3:POST_TYPE_PLURAL_LOWERCASE} given a term ID or term object.",
            " *",
            " * @param int|WP_Term|${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/capitalize}/g}|null $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}",
            " *  Term ID, term object, ${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} object",
            " * ",
            " * @return string|null",
            " */",
            "function get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_${3:POST_TYPE_PLURAL_LOWERCASE}( $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = null ) {",
            "    $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g});",
            "",
            "    if (!$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) return;",
            "",
            "    return $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->get_${3:POST_TYPE_PLURAL_LOWERCASE}();",
            "}$0",
        ]
    },
    "ðŸ“Ž Template Data": {
        "prefix": "inc-td",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * Template Data",
            " *",
            " * A class that handles template data.",
            " *",
            " * @package Theme/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/g};",
            "\t  use Useful_Framework\\Library;",
            "",
            "class Template_Data extends Library\\Package {",
            "",
            "\tpublic function initialize() {",
            "",
            "\t\tparent::initialize();",
            "\t}",
            "}"
        ]
    },
    "ðŸ“Ž Template Blocks": {
        "prefix": "inc-tb",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * Template Blocks",
            " *",
            " * A class that handles template blocks.",
            " *",
            " * @package Theme/${TM_DIRECTORY/(^.+\\/)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g}",
            " * @version 1.0.0",
            " */",
            "",
            "namespace Useful_Group\\Includes\\\\${TM_DIRECTORY/(^.+\\/)?(([^-\\.]+)(-)?)/${3:/capitalize}${4:+_}/g};",
            "\t  use Useful_Framework\\Library;",
            "",
            "class Template_Blocks extends Library\\Package {",
            "",
            "\tpublic function initialize() {",
            "",
            "\t\tparent::initialize();",
            "\t}",
            "}"
        ]
    },
    "ðŸ“Ž Function - Set Global": {
        "prefix": "inc-sg",
        "scope": "php",
        "body": [
            "public function set_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_global() {",
            "\tif ( is_singular('${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}') ) {",
            "\t\treset_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}data();",
            "\t}",
            "}"
        ]
    },
    "ðŸ“Ž Function - Handle Data (Singular)": {
        "prefix": "inc-phd",
        "scope": "php",
        "body": [
            "public function handle_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_data(\\$props) {",
            "\tif ( !isset(\\$props['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}']) ) return \\$props;",
            "",
            "\t$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} = get_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}(\\$props['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}']);",
            "",
            "\tif ( !$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g} ) return \\$props;",
            "",
            "\t\\$_props = [",
            "\t\t'PROP' => $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}->METHOD_NAME",
            "\t];",
            "",
            "\t\\$props = array_merge( \\$props, \\$_props );",
            "",
            "\tunset(\\$props['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}']);",
            "",
            "\treturn \\$props;",
            "}$0",
        ]
    },
    "ðŸ“Ž Function - Handle Data (Plural)": {
        "prefix": "inc-phds",
        "scope": "php",
        "body": [
            "public function handle_${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}_data(\\$props) {",
            "\tif ( !isset(\\$props['${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}']) ) return \\$props;",
            "",
            "\t\\$props['items'] = array_map(function($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}) {",
            "\t\t$${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_props['${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}'] = $${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g};",
            "",
            "\t\treturn \\$this->handle_${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_data($${TM_DIRECTORY/^.+\\/(.*)(s)$/${1:/lowercase}/g}_props);",
            "\t}, \\$props['${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}']);",
            "",
            "\tunset(\\$props['${TM_DIRECTORY/^.+\\/(.*)$/${1:/lowercase}/g}']);",
            "",
            "\treturn \\$props;",
            "}$0",
        ]
    },
    "Template: Setup Template": {
        "prefix": "temp-s",
        "scope": "html",
        "body": [
            "<?php",
            "/**",
            " * Template Name: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/capitalize}/g} Template",
            " *",
            " * @package UsefulGroup/Template",
            " */",
            "",
            "get_header(); ?>",
            "",
            "<?php",
            "\t/**",
            "\t * Hook: about/before",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/before' );",
            "?>",
            "",
            "<?php",
            "\t/**",
            "\t * Hook: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/top",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/top' );",
            "?>",
            "",
            "<?php",
            "\t/**",
            "\t * Hook: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/main",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/main' );",
            "?>",
            "",
            "<?php",
            "\t/**",
            "\t * Hook: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/bottom",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/bottom' );",
            "?>",
            "",
            "<?php",
            "\t/**",
            "\t * Hook: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/after",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/after' );",
            "?>",
            "",
            "<?php get_footer(); ?>"
        ]
    },
    "Template: Set (Do)Action Hook": {
        "prefix": "temp-da",
        "scope": "html",
        "body": [
            "<?php",
            "\t/**",
            "\t * Hook: ${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/${1:ACTION_NAME}",
            "\t */",
            "\tdo_action( '${TM_FILENAME_BASE/(^[a-z]*)(-template$)?/${1:/downcase}/g}/${1:ACTION_NAME}' );",
            "?>"
        ]
    },
    "Dot: Environment": {
        "prefix": "dot-env",
        "scope": "html",
        "body": [
            "SITE=local.${1:SITE_NAME}.com",
            "#BONJOUR=${2:macbook-pro}.local",
            "#PORT=5757"
        ]
    },
}